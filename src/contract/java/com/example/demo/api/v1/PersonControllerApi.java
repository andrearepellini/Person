/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api.v1;

import com.example.demo.model.v1.BookDTO;
import com.example.demo.model.v1.CourseDTO;
import com.example.demo.model.v1.HobbyDTO;
import org.springframework.data.domain.Page;
import com.example.demo.model.v1.PersonDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "PersonController", description = "the PersonController API")
public interface PersonControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /persone/{id} : Cancellare una persona esistente
     * Cancellare una persona esistente, dato un id
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deletePerson",
        summary = "Cancellare una persona esistente",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/persone/{id}"
    )
    default ResponseEntity<Void> deletePerson(
        @Parameter(name = "id", description = "", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persone/{personId}/libri : Ottenere i libri di una persona
     * Ottenere i libri di una persona dato l&#39;id
     *
     * @param personId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getBooksByPersonId",
        summary = "Ottenere i libri di una persona",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  BookDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persone/{personId}/libri",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BookDTO>> getBooksByPersonId(
        @Parameter(name = "personId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("personId") Long personId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /corsi/{personid} : Ottenere i corsi che una persona segue
     * Ottenere la lista di corsi della persona con un dato id
     *
     * @param personid  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCoursesByPersonId",
        summary = "Ottenere i corsi che una persona segue",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CourseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/corsi/{personid}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CourseDTO>> getCoursesByPersonId(
        @Parameter(name = "personid", description = "", required = true, schema = @Schema(description = "")) @PathVariable("personid") Long personid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"nomecorso\" : \"nomecorso\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /corsi : Ottenere i corsi che una persona segue
     * Ottenere la lista di corsi della persona con nome e cognome (se due, i corsi che fanno entrambi)
     *
     * @param nome  (required)
     * @param cognome  (required)
     * @param nome2  (optional)
     * @param cognome2  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCoursesByPersonNomeAndCognomeInCommon",
        summary = "Ottenere i corsi che una persona segue",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CourseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/corsi",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CourseDTO>> getCoursesByPersonNomeAndCognomeInCommon(
        @NotNull @Parameter(name = "nome", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "nome", required = true) String nome,
        @NotNull @Parameter(name = "cognome", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "cognome", required = true) String cognome,
        @Parameter(name = "nome2", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "nome2", required = false) String nome2,
        @Parameter(name = "cognome2", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "cognome2", required = false) String cognome2
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"nomecorso\" : \"nomecorso\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persone/{personId}/hobbies : Ottenere gli hobby di una persona
     * Ottenere gli hobby di una persona dato l&#39;id
     *
     * @param personId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getHobbiesByPersonId",
        summary = "Ottenere gli hobby di una persona",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  HobbyDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persone/{personId}/hobbies",
        produces = { "application/json" }
    )
    default ResponseEntity<List<HobbyDTO>> getHobbiesByPersonId(
        @Parameter(name = "personId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("personId") Long personId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nomehobby\" : \"nomehobby\", \"personid\" : 6, \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persone : Ottenere una pagina ordinata per un campo
     * Ottenere una pagina di persone, dato numero e dimensione, ordinata per un campo, ascending oppure descending, filtrata per caratteri iniziali
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 3)
     * @param field  (optional)
     * @param ascending  (optional, default to true)
     * @param iniziale  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPageWithSortingAndFiltering",
        summary = "Ottenere una pagina ordinata per un campo",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Page.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persone",
        produces = { "application/json" }
    )
    default ResponseEntity<Page> getPageWithSortingAndFiltering(
        @Parameter(name = "page", description = "", schema = @Schema(description = "", defaultValue = "0")) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", schema = @Schema(description = "", defaultValue = "3")) @Valid @RequestParam(value = "size", required = false, defaultValue = "3") Integer size,
        @Parameter(name = "field", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "field", required = false) String field,
        @Parameter(name = "ascending", description = "", schema = @Schema(description = "", defaultValue = "true")) @Valid @RequestParam(value = "ascending", required = false, defaultValue = "true") Boolean ascending,
        @Parameter(name = "iniziale", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "iniziale", required = false) String iniziale
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 0, \"last\" : true, \"numberOfElements\" : 6, \"size\" : 2, \"totalPages\" : 9, \"pageable\" : { \"paged\" : true, \"pageNumber\" : 5, \"offset\" : 1, \"pageSize\" : 5, \"unpaged\" : true, \"sort\" : { \"unsorted\" : true, \"sorted\" : true, \"empty\" : true } }, \"sort\" : { \"unsorted\" : true, \"sorted\" : true, \"empty\" : true }, \"content\" : [ { \"eta\" : 6, \"cognome\" : \"cognome\", \"nome\" : \"nome\", \"id\" : 0, \"corsi\" : [ { \"id\" : 5, \"nomecorso\" : \"nomecorso\" }, { \"id\" : 5, \"nomecorso\" : \"nomecorso\" } ], \"libri\" : [ { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" }, { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" } ] }, { \"eta\" : 6, \"cognome\" : \"cognome\", \"nome\" : \"nome\", \"id\" : 0, \"corsi\" : [ { \"id\" : 5, \"nomecorso\" : \"nomecorso\" }, { \"id\" : 5, \"nomecorso\" : \"nomecorso\" } ], \"libri\" : [ { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" }, { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" } ] } ], \"first\" : true, \"empty\" : true, \"totalElements\" : 7 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persone/{id} : Ottenere una persona esistente
     * Ottenere una persona esistente, dato un id
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPersonById",
        summary = "Ottenere una persona esistente",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  PersonDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persone/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<PersonDTO> getPersonById(
        @Parameter(name = "id", description = "", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eta\" : 6, \"cognome\" : \"cognome\", \"nome\" : \"nome\", \"id\" : 0, \"corsi\" : [ { \"id\" : 5, \"nomecorso\" : \"nomecorso\" }, { \"id\" : 5, \"nomecorso\" : \"nomecorso\" } ], \"libri\" : [ { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" }, { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persone/corsi/{courseid} : Ottenere le persone che seguono un corso
     * Ottenere le persone che seguono un corso dato l&#39;id del corso
     *
     * @param courseid  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPersonsByCourseId",
        summary = "Ottenere le persone che seguono un corso",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  PersonDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persone/corsi/{courseid}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PersonDTO>> getPersonsByCourseId(
        @Parameter(name = "courseid", description = "", required = true, schema = @Schema(description = "")) @PathVariable("courseid") Long courseid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eta\" : 6, \"cognome\" : \"cognome\", \"nome\" : \"nome\", \"id\" : 0, \"corsi\" : [ { \"id\" : 5, \"nomecorso\" : \"nomecorso\" }, { \"id\" : 5, \"nomecorso\" : \"nomecorso\" } ], \"libri\" : [ { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" }, { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /persone : Aggiungere una nuova persona
     * Aggiungere una nuova persona
     *
     * @param personDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "newPerson",
        summary = "Aggiungere una nuova persona",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  PersonDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/persone",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PersonDTO> newPerson(
        @Parameter(name = "PersonDTO", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody PersonDTO personDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eta\" : 6, \"cognome\" : \"cognome\", \"nome\" : \"nome\", \"id\" : 0, \"corsi\" : [ { \"id\" : 5, \"nomecorso\" : \"nomecorso\" }, { \"id\" : 5, \"nomecorso\" : \"nomecorso\" } ], \"libri\" : [ { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" }, { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /persone/{id} : Aggiornare una persona esistente
     * Aggiornare una persona esistente, dato un id
     *
     * @param id  (required)
     * @param personDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "replacePerson",
        summary = "Aggiornare una persona esistente",
        tags = { "person-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  PersonDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/persone/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PersonDTO> replacePerson(
        @Parameter(name = "id", description = "", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "PersonDTO", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody PersonDTO personDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eta\" : 6, \"cognome\" : \"cognome\", \"nome\" : \"nome\", \"id\" : 0, \"corsi\" : [ { \"id\" : 5, \"nomecorso\" : \"nomecorso\" }, { \"id\" : 5, \"nomecorso\" : \"nomecorso\" } ], \"libri\" : [ { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" }, { \"personid\" : 5, \"id\" : 1, \"titololibro\" : \"titololibro\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
